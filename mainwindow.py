from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QLabel, QVBoxLayout, QHBoxLayout
from PyQt5.QtGui import QPixmap, QImage, QColor
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt,QObject
import sys
import threading
import mainwindow_autogenerated
import cv2 as cv
from yolo import Yolo
from hog import Hog


yogbox_map = {
        "Yolo": Yolo("yolov3.weights", "yolov3.cfg"),
        "Hog": Hog()

    }

class App(QMainWindow, mainwindow_autogenerated.Ui_MainWindow):

    def __init__(self, parent=None):
        super(App, self).__init__(parent)
        self.setupUi(self)

        self.mode = 'Yolo'

        self.disply_width = 640
        self.display_height = 480

        # Create the label which frames will be drawn into
        self.image_label = QLabel(self)

        self.image_label.setText("loading...")

        # Create the layout and add our label
        boxlayout = QVBoxLayout()
        boxlayout.addWidget(self.image_label)
        # Add the layout to our camera widget
        self.widgetCamera.setLayout(boxlayout)

        self.Processing = False        

        # Start the camera capture thread
        self.thread = threading.Thread(target = self.cameraThread)
        self.thread.setDaemon(True) # Sets thread to be a child of the main process thread. i.e. killing it on exit
        self.thread.start()

        self.initHandlers()


    def initHandlers(self):
        self.btnToggle.clicked.connect(self.onToggle)
        self.yogbox.currentIndexChanged.connect(self.onSelectionChange)


    def onSelectionChange(self):
        self.Processing = False
        self.mode = str(self.yogbox.currentText())
        print(f"mode: {self.mode}")

    def onToggle(self):
        self.Processing = not self.Processing
        
    def setImage(self, img):
        h, w, ch = img.shape    
        bytes_per_line = ch * w
        qimage = QImage(img.data, w, h, bytes_per_line, QImage.Format_RGB888)
        p = qimage.scaled(self.disply_width, self.display_height, Qt.KeepAspectRatio)
        pixmap = QPixmap.fromImage(p)
        self.image_label.setPixmap(pixmap)

    def getCurrentModel(self):
        model = yogbox_map[self.mode]
        return model

    def processFrames(self, cap):
        success, frame = cap.read()
        if not success: return

        currentModel = self.getCurrentModel()
        img = currentModel.process(frame)
        self.setImage(img)

    def drawNormalFrame(self, cap):
        success, frame = cap.read()
        if not success: return
        img = cv.cvtColor(frame, cv.COLOR_BGR2RGB)
        self.setImage(img)

    def cameraThread(self):
        capture = cv.VideoCapture(0)

        try:
            while 1:
                try:
                    if self.Processing:
                        # Capture webcam and process frames. then draw to screen
                        self.processFrames(capture)
                    else:
                        # Capture webcam as standard and draw to screen
                        self.drawNormalFrame(capture)
                except Exception as ex:
                    print(ex)
                    raise ex
        finally:
            capture.release()